<?php

namespace App\Tests\Unit\Product\Infrastructure;

use App\Product\Domain\Exception\InvalidProductException;
use App\Product\Domain\Model\Product;
use App\Product\Infrastructure\ProductMapper;
use PHPUnit\Framework\Attributes\DataProvider;
use PHPUnit\Framework\TestCase;

class ProductMapperTest extends TestCase
{
    private ProductMapper $instance;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->instance = new ProductMapper();
    }

    #[DataProvider('invalidDataProvider')]
    public function testMapperThrowsException(array $productData): void
    {
        $this->expectException(InvalidProductException::class);
        $this->instance->mapProductFromArray($productData);
    }

    public static function invalidDataProvider(): array
    {
        return [
            "product id not set" => [[]],
            "product id is array" => [["id" => []]],
            "product id is null" => [["id" => null]],
            "description not set" => [["id" => "test_id"]],
            "description is array" => [["id" => "test_id", "description" => []]],
            "description is null" => [["id" => "test_id", "description" => null]],
            "description is null" => [["id" => "test_id", "description" => null]],
            "category is not set" => [["id" => "test_id", "description" => ""]],
            "category is array" => [["id" => "test_id", "description" => "", "category" => []]],
            "category is null" => [["id" => "test_id", "description" => "", "category" => null]],
            "category is string" => [["id" => "test_id", "description" => "", "category" => "aasda"]],
            "price not set" => [["id" => "test_id", "description" => "", "category" => 1]],
            "price is array" => [["id" => "test_id", "description" => "", "category" => 1, "price" => []]],
            "price is null" => [["id" => "test_id", "description" => "", "category" => 1, "price" => null]],
            "price is string" => [["id" => "test_id", "description" => "", "category" => 1, "price" => "asdad"]]
        ];
    }

    #[DataProvider('validDataProvider')]
    public function testMapperWorksCorrectly(array $productData): void
    {
        $this->assertEquals(
            new Product(
                $productData["id"],
                $productData["description"],
                $productData["category"],
                $productData["price"],
            ),
            $this->instance->mapProductFromArray($productData)
        );
    }

    public static function validDataProvider(): array
    {
        return[
            "base" => [["id" => "test_id", "description" => "", "category" => 1, "price" => 0]],
            "category with string id" => [["id" => "test_id", "description" => "", "category" => "1", "price" => 0]],
            "product with string price" => [["id" => "test_id", "description" => "", "category" => 1, "price" => "0"]],
            "category with string id and product with string price" => [
                ["id" => "test_id", "description" => "", "category" => "1", "price" => "0"]
            ],
        ];
    }
}
