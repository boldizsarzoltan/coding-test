<?php

namespace App\Shared;

use ArrayObject;
/**
 * @template T
 * @extends ArrayObject<int,T>
 */
abstract class TypedArray extends ArrayObject
{
    /**
     * @param array<mixed> $array
     * @param int $flags
     * @param class-string $iteratorClass
     */
    public function __construct(array $array = [], int $flags = 0, string $iteratorClass = "ArrayIterator")
    {
        $this->verifyType(...$array);
        parent::__construct($array, $flags, $iteratorClass);
    }

    public function append(mixed $value): void
    {
        $this->verifyType($value);
        parent::append($value); // TODO: Change the autogenerated stub
    }

    public function offsetSet(mixed $key, mixed $value): void
    {
        $this->verifyType($value);
        parent::offsetSet($key, $value); // TODO: Change the autogenerated stub
    }

    /**
     * @param object|array<mixed> $array
     * @return array<T>
     */
    public function exchangeArray(object|array $array): array
    {
        if(is_array($array)){
            $this->verifyType($array);
            return parent::exchangeArray($array); // TODO: Change the autogenerated stub
        }
        return $this->getArrayCopy();
    }

    private function verifyType(mixed $object): void
    {
        if(is_object($object) && is_a($object, $this->getType())) {
            return;
        }

        throw new InvalidTypeError(
            sprintf(
                "%s is not of type",
                is_object($object) ? $object::class : gettype($object)
            )
        );
    }

    /**
     * @return class-string<T>
     */
    abstract protected function getType(): string;
}